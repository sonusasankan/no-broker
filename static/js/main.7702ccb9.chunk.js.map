{"version":3,"sources":["components/Header/Header.js","components/PropertyList/PropertyList.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","class","href","Component","PropertyList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","properties","isLoading","error","_this2","fetch","then","response","json","resData","setState","catch","_this$state","Fragment","message","data","map","item","index","city","App","components_Header_Header","components_PropertyList_PropertyList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAYeA,gMARX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,eAAeC,KAAK,KAA7B,qBAJcC,cC+CPC,cA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,WAAY,GACZC,WAAW,EACXC,MAAO,MALGV,mFASM,IAAAW,EAAAR,KAClBS,MAAM,+CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJL,EAAKM,SAAS,CACVT,WAAYQ,EACZP,WAAW,MAIhBS,MAAM,SAAAR,GAAK,OAAIC,EAAKM,SAAS,CAAEP,QAAOD,WAAW,uCAI7C,IAAAU,EACkChB,KAAKI,MAAtCE,EADDU,EACCV,UAAWD,EADZW,EACYX,WAAYE,EADxBS,EACwBT,MAC/B,OACElB,EAAAC,EAAAC,cAACF,EAAAC,EAAM2B,SAAP,KACE5B,EAAAC,EAAAC,cAAA,8BACCgB,EAAQlB,EAAAC,EAAAC,cAAA,SAAIgB,EAAMW,SAAe,KAChCZ,EAUFjB,EAAAC,EAAAC,cAAA,wBATAc,EAAWc,KAAKC,IAAK,SAACC,EAAMC,GAC1B,OACEjC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAK8B,EAAKE,iBAlCG5B,aCkBZ6B,mLAVX,OACEnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkC,EAAD,MADF,gBAGEpC,EAAAC,EAAAC,cAACmC,EAAD,cANU/B,aCIEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.7702ccb9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n class Header extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar\">\r\n        <a class=\"navbar-brand\" href=\"#\">No Broker</a>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\n\r\nclass PropertyList extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      properties: [],\r\n      isLoading: true,\r\n      error: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"//api.jsonbin.io/b/5bf025493c134f38b01a5e53\")\r\n      .then(response => response.json())\r\n      .then(resData => {\r\n        this.setState({ \r\n            properties: resData,\r\n            isLoading: false \r\n        })\r\n      })\r\n      // Catch any errors we hit and update the app\r\n      .catch(error => this.setState({ error, isLoading: false }));   \r\n      \r\n  }\r\n\r\n  render() {\r\n    const { isLoading, properties, error } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Properties lists</h1>\r\n        {error ? <p>{error.message}</p> : null}\r\n        {!isLoading ? (\r\n        properties.data.map( (item, index) => {\r\n          return (\r\n            <ul>\r\n              <li>{item.city}</li>\r\n            </ul>\r\n          );\r\n        })\r\n      // If there is a delay in data, let's let the user know it's loading\r\n      ) : (\r\n        <h3>Loading...</h3>\r\n      )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PropertyList;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Header from './components/Header'\nimport PropertyList from './components/PropertyList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        div.container\n        <PropertyList/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}